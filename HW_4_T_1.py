# 1. Проанализировать скорость и сложность одного любого алгоритма из разработанных в рамках домашнего задания первых трех уроков.
# Примечание. Идеальным решением будет:
# a. выбрать хорошую задачу, которую имеет смысл оценивать,
# b. написать 3 варианта кода (один у вас уже есть),
# c. проанализировать 3 варианта и выбрать оптимальный,
# d. результаты анализа вставить в виде комментариев в файл с кодом (не забудьте указать, для каких N вы проводили замеры),
# e. написать общий вывод: какой из трёх вариантов лучше и почему.

# Домашнее задание 1. Задача 7. Определить, является ли год, который ввел пользователь, високосным или не високосным.
def what_year(year):
    # year = 1984 # Запрашиваем год
    del_yaer = abs(2000 - year) # Мы знаем, что 2000 год был высокосным. Находим разность между введенным годом и 2000
    if year % 100 == 0: # Для каждого сотого года (... 1800, 1900, 2000 ...):
        if year % 400 == 0: # Если год кратен 400, то
            return 'Yes!' # он высокосный (так мы исключаем ... 1700, 1800, 1900 ...)
        else: # Иначе -
            return 'No.' # Это не высокосынй год (... 1700, ... 2100 и т.д.)
    else: # Если же год не делится на 100 без остатка, то
        if del_yaer % 4 == 0: # Берем нашу разность и проверям кратна ли она 4. Если да, то
            return 'Yes!' # Наш год - высокосный
        else: # Если нет, то
            return 'No.' # Не высокосный


# Домашнее задание 2. Задача 3. Сформировать из введенного числа обратное по порядку входящих в него цифр и вывести на экран.
# # Например, если введено число 3486, надо вывести 6843.

def rev(num):
    rev_num = ''

    while num / 10 > 0:
        el = str(num % 10)
        num = num // 10
        rev_num = rev_num + el

    rev_num = int(rev_num)
    return rev_num

# Домашнее задание 3. Задача 1. В диапазоне натуральных чисел от 2 до 99 определить, сколько из них кратны каждому из чисел в диапазоне от 2 до 9.
# Примечание: 8 разных ответов.

def fun(start, finish):
    result = {}
    for i in range(2, 10):
        count = 0
        for el in range(start, finish):
            if el % i == 0:
                count += 1
        result[i] = count
    return result

